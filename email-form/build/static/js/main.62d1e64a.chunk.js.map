{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SESConfig","apiVersion","accessKeyId","apiKeys","AWS_ACCESS_KEY","secretAccessKey","AWS_SECRET_KEY","region","ses","AWS","SES","App","props","state","error","submitted","name","email","message","handleChange","bind","handleSubmit","event","target","id","this","setState","value","preventDefault","newSubmission","url","console","log","JSON","stringify","callback","userInput","params","destination","templateData","userName","Source","Destination","Template","TemplateData","sendTemplatedEmail","email_err","email_data","info","sendMail","err","data","currentTarget","reset","className","onSubmit","noValidate","autoComplete","TextField","onChange","label","style","visibility","type","variant","color","disabled","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"+dAMMA,EAAY,CAChBC,WAAY,SACZC,YAAaC,EAAQC,eACrBC,gBAAiBF,EAAQG,eACzBC,OAAQJ,EAAQI,QAGZC,EAAM,IAAIC,IAAIC,IAAIV,GAwHTW,E,kDA7Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,KACPC,WAAW,EACXC,KAAM,GACNC,MAAO,GACPC,QAAS,IAEX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVH,E,yDAaNE,GACa,SAApBA,EAAMC,OAAOC,IACfC,KAAKC,SAAS,CACZV,KAAMM,EAAMC,OAAOI,QAIC,UAApBL,EAAMC,OAAOC,IACfC,KAAKC,SAAS,CACZT,MAAOK,EAAMC,OAAOI,QAIA,YAApBL,EAAMC,OAAOC,IACfC,KAAKC,SAAS,CACZR,QAASI,EAAMC,OAAOI,U,mCAKfL,GACXA,EAAMM,iBACN,IAAMC,EAAgB,CACpBC,IAAK,mBACLd,KAAMS,KAAKZ,MAAMG,KACjBC,MAAOQ,KAAKZ,MAAMI,MAClBC,QAASO,KAAKZ,MAAMK,SAElBO,KAAKZ,MAAMG,MAAQS,KAAKZ,MAAMI,OAChCQ,KAAKZ,MAAMK,UACXa,QAAQC,IAAIC,KAAKC,UAAUL,IApElB,SAAUM,EAAUC,GACjC,IAAIC,EAAS,GACTC,EAAc,CAChB,YAAe,CAACF,EAAUnB,QAExBsB,EAAe,GACnBA,EAAaC,SAAWJ,EAAUpB,KAClCuB,EAAarB,QAAUkB,EAAUlB,QACjCmB,EAAOI,OAAS,2BAChBJ,EAAOK,YAAcJ,EACrBD,EAAOM,SAAW,eAClBN,EAAOO,aAAeX,KAAKC,UAAUK,GAErC/B,EAAIqC,mBAAmBR,GAAQ,SAAUS,EAAWC,GAC9CD,GACFf,QAAQjB,MAAM,6BAA+BgC,GAC7CX,EAASW,EAAWC,KAEpBhB,QAAQiB,KAAK,iCAAmCf,KAAKC,UAAUa,IAC/DZ,EAAS,KAAMY,OAkDfE,EAAS,SAAUC,EAAKC,GAClBD,EACFnB,QAAQC,IAAI,oBAEZD,QAAQC,IAAI,yBAEbH,IAELJ,KAAKC,SAAS,CACZV,KAAM,GACNC,MAAO,GACPC,QAAS,KAEXI,EAAM8B,cAAcC,U,+BAIpB,OACE,yBAAKC,UAAU,OACb,0BAAMC,SAAU9B,KAAKJ,aAAcmC,YAAU,EAACC,aAAa,MAAMH,UAAU,oEAEzE,yBAAKA,UAAU,QACb,kBAACI,EAAA,EAAD,CAAWlC,GAAG,OAAOmC,SAAUlC,KAAKN,aAAcmC,UAAU,QAAQM,MAAM,SAC1E,yBAAKN,UAAU,uCAAuCO,MAAO,CAAEC,WAAYrC,KAAKZ,MAAMG,KAAO,SAAW,YAAxG,wBAGF,yBAAKsC,UAAU,QACb,kBAACI,EAAA,EAAD,CAAWlC,GAAG,QAAQmC,SAAUlC,KAAKN,aAAcmC,UAAU,QAAQM,MAAM,UAC3E,yBAAKN,UAAU,uCAAuCO,MAAO,CAAEC,WAAYrC,KAAKZ,MAAMI,MAAQ,SAAW,YAAzG,0BAGF,yBAAKqC,UAAU,QACb,kBAACI,EAAA,EAAD,CAAWlC,GAAG,UAAUmC,SAAUlC,KAAKN,aAAcmC,UAAU,QAAQM,MAAM,YAC7E,yBAAKN,UAAU,uCAAuCO,MAAO,CAAEC,WAAYrC,KAAKZ,MAAMK,QAAU,SAAW,YAA3G,2BAGF,yBAAKoC,UAAU,wBACb,2BAAOA,UAAU,4CAA4CS,KAAK,QAAQpC,MAAM,WAChF,4BAAQqC,QAAQ,YAAYC,MAAM,UAAUC,WAAYzC,KAAKZ,MAAMG,MAC9DS,KAAKZ,MAAMI,OAASQ,KAAKZ,MAAMK,SAClCoC,UAAU,8CAA8CC,SAAU9B,KAAKJ,aACvE0C,KAAK,SAASpC,MAAM,UAHtB,e,GAnFMwC,IAAMC,WC3BJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvE,GACLiB,QAAQjB,MAAMA,EAAMI,a","file":"static/js/main.62d1e64a.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport './App.css';\nimport apiKeys from './config.json'\nimport AWS from 'aws-sdk';\n\nconst SESConfig = {\n  apiVersion: 'latest',\n  accessKeyId: apiKeys.AWS_ACCESS_KEY,\n  secretAccessKey: apiKeys.AWS_SECRET_KEY,\n  region: apiKeys.region\n}\n\nconst ses = new AWS.SES(SESConfig);\n\nvar sendMail = function (callback, userInput) {\n  var params = {};\n  var destination = {\n    \"ToAddresses\": [userInput.email]\n  };\n  var templateData = {};\n  templateData.userName = userInput.name;\n  templateData.message = userInput.message;\n  params.Source = \"baileyowenhill@gmail.com\";\n  params.Destination = destination;\n  params.Template = \"testtemplate\";\n  params.TemplateData = JSON.stringify(templateData)\n\n  ses.sendTemplatedEmail(params, function (email_err, email_data) {\n    if (email_err) {\n      console.error('Failed to send the email: ' + email_err);\n      callback(email_err, email_data)\n    } else {\n      console.info('Successfully sent the email : ' + JSON.stringify(email_data));\n      callback(null, email_data);\n    }\n  })\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      submitted: false,\n      name: '',\n      email: '',\n      message: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    if (event.target.id === 'name') {\n      this.setState({\n        name: event.target.value\n      });\n    }\n\n    if (event.target.id === 'email') {\n      this.setState({\n        email: event.target.value\n      });\n    }\n\n    if (event.target.id === 'message') {\n      this.setState({\n        message: event.target.value\n      });\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const newSubmission = {\n      url: '/new-email-stage',\n      name: this.state.name,\n      email: this.state.email,\n      message: this.state.message\n    };\n    if (this.state.name && this.state.email &&\n      this.state.message) {\n      console.log(JSON.stringify(newSubmission));\n      sendMail(function (err, data) {\n        if (err) {\n          console.log('send mail failed');\n        } else {\n          console.log('send mail succeeded');\n        }\n      }, newSubmission)\n    }\n    this.setState({\n      name: '',\n      email: '',\n      message: ''\n    });\n    event.currentTarget.reset();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <form onSubmit={this.handleSubmit} noValidate autoComplete=\"off\" className=\"d-flex justify-content-start\n      align-items-center flex-column mt-2\">\n          <div className=\"w-25\">\n            <TextField id=\"name\" onChange={this.handleChange} className=\"w-100\" label=\"Name\" />\n            <div className=\"text-left required text-general mt-1\" style={{ visibility: this.state.name ? 'hidden' : 'visible' }}>\n              A name is required.</div>\n          </div>\n          <div className=\"w-25\">\n            <TextField id=\"email\" onChange={this.handleChange} className=\"w-100\" label=\"Email\" />\n            <div className=\"text-left required text-general mt-1\" style={{ visibility: this.state.email ? 'hidden' : 'visible' }}>\n              An email is required.</div>\n          </div>\n          <div className=\"w-25\">\n            <TextField id=\"message\" onChange={this.handleChange} className=\"w-100\" label=\"Message\" />\n            <div className=\"text-left required text-general mt-1\" style={{ visibility: this.state.message ? 'hidden' : 'visible' }}>\n              A message is required.</div>\n          </div>\n          <div className=\"w-25 d-flex flex-row\">\n            <input className=\"w-50 mr-1 mt-3 btn btn-light rounded-pill\" type=\"reset\" value=\"Cancel\" />\n            <button variant=\"contained\" color=\"primary\" disabled={!(this.state.name\n              && this.state.email && this.state.message)}\n              className=\"w-50 mt-3 ml-1 btn btn-primary rounded-pill\" onSubmit={this.handleSubmit}\n              type=\"submit\" value=\"Submit\">Send</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}